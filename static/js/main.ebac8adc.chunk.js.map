{"version":3,"sources":["components/search-box/search-box.js","components/card/card.js","components/card-list/card-list.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGcA,EAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACvC,OACE,uBAAOC,UAAU,SACjBC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCLDI,G,MAAO,SAACC,GAAD,OAChB,sBAAKJ,UAAU,iBAAf,UACE,qBACAK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEH,6BAAKJ,EAAMG,QAAQE,OACjB,4BAAIL,EAAMG,QAAQG,aCNbC,G,MAAW,SAACP,GACrB,OACA,qBAAKJ,UAAU,YAAf,SAEGI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAAUA,GAAtBA,EAAQC,WC8BhBM,G,wDAjCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACZH,SAAU,GACVI,YAAa,IALF,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACV,SAAUS,S,oBAI1C,WAAU,IAAD,OACP,EAAiCE,KAAKR,MAA9BH,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,YACZQ,EAAmBZ,EAASa,QAAO,SAAAlB,GAAO,OAC9CA,EAAQE,KAAKiB,cAAcC,SAASX,EAAYU,kBAElD,OACE,sBAAK1B,UAAU,MAAf,UACE,kDACD,cAAC,EAAD,CACCF,YAAY,kBACZC,aAAgB,SAAA6B,GAAC,OAAK,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAE7D,cAAC,EAAD,CAAUlB,SAAUY,W,GA5BRO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ebac8adc.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.css';\n\n export const SearchBox = ({placeholder, handleChange}) => {\n  return (\n    <input className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n    />\n\n  )\n}\n\n","import React from 'react';\nimport './card.css';\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n      <img\n      alt=\"monster\"\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\nimport { Card } from '../card/card';\nimport './card-list.css';\n\nexport const CardList = (props) => {\n    return (\n    <div className=\"card-list\">\n\n      {props.monsters.map(monster =>\n        ( <Card key = {monster.id} monster= {monster} />\n      ))}\n    </div>\n    )\n}","import React, {Component} from 'react';\nimport  {SearchBox}  from './components/search-box/search-box';\nimport { CardList } from './components/card-list/card-list';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n     monsters: [],\n     searchField: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n\n  render() {\n    const { monsters, searchField } =this.state\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n       <SearchBox\n        placeholder=\"search monsters\"\n        handleChange = {e =>  this.setState({searchField: e.target.value})}\n       />\n      <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}